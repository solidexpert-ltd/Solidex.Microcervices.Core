// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Microcervices.Core.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Microcervices.Core.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System;
    using global::System.Threading.Tasks;
    using global::Solidex.Core.ViewModels.Querying;
    using global::Refit;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Comment;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICommentApi : ICommentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICommentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<PageView<CommentViewModel>> ICommentApi.GetCommentsAsync(Guid parentId, FilterRequest request)
        {
            var arguments = new object[] { parentId, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCommentsAsync", new Type[] { typeof(Guid), typeof(FilterRequest) });
            return (Task<PageView<CommentViewModel>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CommentViewModel> ICommentApi.CreateCommentAsync(Guid parentId, CommentViewModel model)
        {
            var arguments = new object[] { parentId, model };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateCommentAsync", new Type[] { typeof(Guid), typeof(CommentViewModel) });
            return (Task<CommentViewModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CommentViewModel> ICommentApi.UpdateCommentAsync(Guid parentId, Guid id, CommentViewModel model)
        {
            var arguments = new object[] { parentId, id, model };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateCommentAsync", new Type[] { typeof(Guid), typeof(Guid), typeof(CommentViewModel) });
            return (Task<CommentViewModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseViewModel> ICommentApi.DeleteCommentAsync(Guid parentId, Guid id)
        {
            var arguments = new object[] { parentId, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteCommentAsync", new Type[] { typeof(Guid), typeof(Guid) });
            return (Task<ResponseViewModel>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Solidex.Core.ViewModels.ActivityStream;
    using global::Solidex.Core.ViewModels.Company;
    using global::Solidex.Core.ViewModels.UserInformation;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Querying;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICompanyApi : ICompanyApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICompanyApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<PageView<ActivityViewModel.ActivityViewModelDetails>> ICompanyApi.GetActivitiesAsync(string shortcut, FilterRequest<QueryRequest.ActivityRequest> request)
        {
            var arguments = new object[] { shortcut, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActivitiesAsync", new Type[] { typeof(string), typeof(FilterRequest<QueryRequest.ActivityRequest>) });
            return (Task<PageView<ActivityViewModel.ActivityViewModelDetails>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ActivityViewModel.ActivityViewModelDetails> ICompanyApi.CreateActivityAsync(string shortcut, ActivityViewModel.ActivityCreateModel model)
        {
            var arguments = new object[] { shortcut, model };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateActivityAsync", new Type[] { typeof(string), typeof(ActivityViewModel.ActivityCreateModel) });
            return (Task<ActivityViewModel.ActivityViewModelDetails>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<List<ActivityViewModel.ActivityViewModelDetails>>> ICompanyApi.GetLastActiviesGet(FilterRequest<QueryRequest.IdsSearchRequest> request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLastActiviesGet", new Type[] { typeof(FilterRequest<QueryRequest.IdsSearchRequest>) });
            return (Task<ApiResponse<List<ActivityViewModel.ActivityViewModelDetails>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<List<ActivityViewModel.ActivityViewModelDetails>>> ICompanyApi.GetLastActiviesPost(FilterRequest<QueryRequest.IdsSearchRequest> request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLastActiviesPost", new Type[] { typeof(FilterRequest<QueryRequest.IdsSearchRequest>) });
            return (Task<ApiResponse<List<ActivityViewModel.ActivityViewModelDetails>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<PageView<UserInformationViewModel.UserInformationViewModelParticipant>> ICompanyApi.GetParticipantsAsync(string shortcut, FilterRequest request)
        {
            var arguments = new object[] { shortcut, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetParticipantsAsync", new Type[] { typeof(string), typeof(FilterRequest) });
            return (Task<PageView<UserInformationViewModel.UserInformationViewModelParticipant>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserInformationViewModel.UserInformationViewModelParticipant> ICompanyApi.GetParticipantAsync(string shortcut, Guid id)
        {
            var arguments = new object[] { shortcut, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetParticipantAsync", new Type[] { typeof(string), typeof(Guid) });
            return (Task<UserInformationViewModel.UserInformationViewModelParticipant>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<PageView<CompanyViewModel.Summary>> ICompanyApi.GetCompaniesAsync(FilterRequest<QueryRequest.CompanyRequest> request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCompaniesAsync", new Type[] { typeof(FilterRequest<QueryRequest.CompanyRequest>) });
            return (Task<PageView<CompanyViewModel.Summary>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<CompanyViewModel.Details>> ICompanyApi.GetCompanyToShortcutAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCompanyToShortcutAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<CompanyViewModel.Details>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<CompanyViewModel.Details>> ICompanyApi.UpdateCompanyField(string shortcut, Dictionary<string, string> company)
        {
            var arguments = new object[] { shortcut, company };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateCompanyField", new Type[] { typeof(string), typeof(Dictionary<string, string>) });
            return (Task<ApiResponse<CompanyViewModel.Details>>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Vstroyke.Order;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOrderApi : IOrderApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOrderApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<ResponseViewModel<OrderViewModel.Details>>> IOrderApi.CreateOrderAsync(string shortcut, OrderViewModel.Details model)
        {
            var arguments = new object[] { shortcut, model };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateOrderAsync", new Type[] { typeof(string), typeof(OrderViewModel.Details) });
            return (Task<ApiResponse<ResponseViewModel<OrderViewModel.Details>>>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Payment;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPaymentApi : IPaymentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPaymentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<PaymentViewModel.Summary> IPaymentApi.GetModuleAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetModuleAsync", new Type[] { typeof(string) });
            return (Task<PaymentViewModel.Summary>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseViewModel> IPaymentApi.DeleteModuleAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteModuleAsync", new Type[] { typeof(string) });
            return (Task<ResponseViewModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<PaymentDataViewModel.Response> IPaymentApi.SetPaymentData(PaymentDataViewModel.Request request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("SetPaymentData", new Type[] { typeof(PaymentDataViewModel.Request) });
            return (Task<PaymentDataViewModel.Response>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Solidex.Core.ViewModels;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::Solidex.Core.ViewModels.Company;
    using global::Solidex.Core.ViewModels.Event;
    using global::Solidex.Core.ViewModels.UserInformation;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIPhotoMskApi : IPhotoMskApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIPhotoMskApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<dynamic> IPhotoMskApi.GetRouteToShortcutAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRouteToShortcutAsync", new Type[] { typeof(string) });
            return (Task<dynamic>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<UserInformationViewModel.UserInformationViewModelSummary> IPhotoMskApi.GetUserInformationAsync(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInformationAsync", new Type[] { typeof(Guid) });
            return (Task<UserInformationViewModel.UserInformationViewModelSummary>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<UserInformationViewModel.UserInformationViewModelSummary>> IPhotoMskApi.GetUserInformationsAsync(Guid[] ids)
        {
            var arguments = new object[] { ids };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInformationsAsync", new Type[] { typeof(Guid[]) });
            return (Task<List<UserInformationViewModel.UserInformationViewModelSummary>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<List<UserEventViewModel>> IPhotoMskApi.GetEventsByIDAsync(string[] ids)
        {
            var arguments = new object[] { ids };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetEventsByIDAsync", new Type[] { typeof(string[]) });
            return (Task<List<UserEventViewModel>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<OkResult>> IPhotoMskApi.ConfirmPaymentBonusCardAsync(string shortcut, Guid checkLineId)
        {
            var arguments = new object[] { shortcut, checkLineId };
            var func = requestBuilder.BuildRestResultFuncForMethod("ConfirmPaymentBonusCardAsync", new Type[] { typeof(string), typeof(Guid) });
            return (Task<ApiResponse<OkResult>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<CompanyViewModel.Details>> IPhotoMskApi.GetRouteAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRouteAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<CompanyViewModel.Details>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PageView<dynamic>>> IPhotoMskApi.GetRouteParticipantsAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRouteParticipantsAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<PageView<dynamic>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<dynamic>> IPhotoMskApi.GetLegalInformationAsync(string shortcut)
        {
            var arguments = new object[] { shortcut };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLegalInformationAsync", new Type[] { typeof(string) });
            return (Task<ApiResponse<dynamic>>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Solidex.Core.Data.Models.SMS;
    using global::Solidex.Core.ViewModels;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedISmsServiceApi : ISmsServiceApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedISmsServiceApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ResponseViewModel> ISmsServiceApi.SendSystemSmsAsync(SmsMessageEntity message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("SendSystemSmsAsync", new Type[] { typeof(SmsMessageEntity) });
            return (Task<ResponseViewModel>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ResponseViewModel> ISmsServiceApi.SendCompanySmsAsync(CompanySmsMessageEntity message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("SendCompanySmsAsync", new Type[] { typeof(CompanySmsMessageEntity) });
            return (Task<ResponseViewModel>)func(Client, arguments);
        }
    }
}

namespace Microservices.RestClient.Infrastructure
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Picture;
    using global::Solidex.Core.ViewModels.Querying;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedISolidexFilesApi : ISolidexFilesApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedISolidexFilesApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<PageView<FileEntryViewModel.Details>>> ISolidexFilesApi.GetFilesToShorcutAsync(string shortcut, FilterRequest<QueryRequest.FilesSearchRequest> request)
        {
            var arguments = new object[] { shortcut, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFilesToShorcutAsync", new Type[] { typeof(string), typeof(FilterRequest<QueryRequest.FilesSearchRequest>) });
            return (Task<ApiResponse<PageView<FileEntryViewModel.Details>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<PageView<FileEntryViewModel.Details>>> ISolidexFilesApi.UploadFilesToShortcut(string shortcut, List<FileUploadModel> model)
        {
            var arguments = new object[] { shortcut, model };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFilesToShortcut", new Type[] { typeof(string), typeof(List<FileUploadModel>) });
            return (Task<ApiResponse<PageView<FileEntryViewModel.Details>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<ResponseViewModel>> ISolidexFilesApi.DeleteFileAsync(string shortcut, Guid id)
        {
            var arguments = new object[] { shortcut, id };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteFileAsync", new Type[] { typeof(string), typeof(Guid) });
            return (Task<ApiResponse<ResponseViewModel>>)func(Client, arguments);
        }
    }
}

namespace Microcervices.Core.Infrasructure.RestApi
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Solidex.Core.ViewModels;
    using global::Solidex.Core.ViewModels.Querying;
    using global::Refit;
    using global::Solidex.Core.ViewModels.UserInformation;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserInformationApi : IUserInformationApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserInformationApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<UserInformationViewModel.UserInformationViewModelSummary> IUserInformationApi.GetUserInformationAsync(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInformationAsync", new Type[] { typeof(Guid) });
            return (Task<UserInformationViewModel.UserInformationViewModelSummary>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<PageView<UserInformationViewModel.UserInformationViewModelSummary>> IUserInformationApi.GetUserInformationsAsnc(FilterRequest<QueryRequest.FilterIdsSearchRequest> request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserInformationsAsnc", new Type[] { typeof(FilterRequest<QueryRequest.FilterIdsSearchRequest>) });
            return (Task<PageView<UserInformationViewModel.UserInformationViewModelSummary>>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
